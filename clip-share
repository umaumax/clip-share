#!/usr/bin/env bash

function is_remote() { [[ $CLIPSHARE_MODE == "remote" ]]; }
function is_local() { [[ -z $CLIPSHARE_MODE ]] || [[ $CLIPSHARE_MODE == "local" ]]; }

if is_local; then
  if [[ $# == 0 ]]; then
    echo 1>&2 "$0 <remote host>"
    exit 1
  fi
  host="$1"
  CLIPSHARE_MODE='local'
elif is_remote; then
  export DISPLAY=${DISPLAY:-':0'}
else
  echo 1>&2 "set CLIPSHARE_MODE [local] or [remote]"
  exit 1
fi

drop_windows_cr=${CLIPSHARE_DROP_WINDOWS_CR:-1}

function cmdcheck() { type >/dev/null 2>&1 "$@"; }

# for alias
shopt -s expand_aliases
alias watch_loop_filter_cmd='command cat'
if [[ $(uname) == "Darwin" ]]; then
  alias c='pbcopy'
  alias p='pbpaste'
  alias base64encode='base64'
  alias base64decode='base64 -D'
fi
if [[ $(uname -a) =~ "Ubuntu" ]]; then
  if cmdcheck xclip; then
    alias c='xclip -sel clip'
    alias p='xclip -o -sel clip'
  elif cmdcheck xsel; then
    alias c='xsel --clipboard --input'
    alias p='xsel --clipboard --output'
  fi
  alias base64encode='base64 -w 0'
  alias base64decode='base64 -d'
fi
if [[ "$OS" =~ "Windows" ]]; then
  if [[ -e /dev/clipboard ]]; then
    alias p='(cat /dev/clipboard)'
    alias c='(cat > /dev/clipboard)'
  else
    cmdcheck gopaste && alias p='gopaste'
    cmdcheck gocopy && alias c='gocopy'
  fi
  alias base64encode='base64 -w 0'
  alias base64decode='base64 -d'

  if [[ -n "$drop_windows_cr" ]]; then
    alias watch_loop_filter_cmd='tr -d "\r"'
  fi
fi

alias log='echo 1>&2'

# pipe wait loop
# input: base64 encoded line
# output: only log(stderr)
# description: send data via clipboard to watch_loop()
function pipe_loop() {
  local clipboard_encoded_now
  local clipboard_encoded_new
  while read -r LINE; do
    # NOTE: compare current clipboard to prevent extra update
    #         because extra update can be drop MIME data
    clipboard_encoded_now=$(p | base64encode)
    clipboard_encoded_new="$LINE"
    if [[ -n $clipboard_encoded_new ]] && [[ $clipboard_encoded_now != "$clipboard_encoded_new" ]]; then
      log "[$CLIPSHARE_MODE][pipe_loop][pipe to clipboard] data:[$clipboard_encoded_new]($(printf '%s\n' "$clipboard_encoded_new" | base64decode))"
      printf '%s\n' "$clipboard_encoded_new" | base64decode | c
      local tmp_dirpath="${TMPDIR:-/tmp}/clipshare_remote_update_flag"
      touch "$tmp_dirpath"
    fi
  done
}

# watch clipboard
# input: clipboard
# output: base64 encoded line(stdout) and log(stderr)
# description: pooling data via clipboard and send to pipe_loop() via pipe output
function watch_loop() {
  # NOTE: if interval is bigger than about 0.1, this loop cannot get clipboard contents before 'Error: target STRING not available'
  local interval="0.1"
  local clipboard_encoded_now=""
  local clipboard_encoded_new
  while true; do
    clipboard_encoded_new=$(
      p | watch_loop_filter_cmd | base64encode
      exit ${PIPESTATUS[0]:-$pipestatus[$((0 + 1))]}
    )
    if [[ $? != 0 ]]; then
      # NOTE: for avoid 'Error: target STRING not available'
      # FYI: [ClipboardPersistence \- Ubuntu Wiki]( https://wiki.ubuntu.com/ClipboardPersistence )
      log "[$CLIPSHARE_MODE][watch_loop][resume clipboard] data:[$clipboard_encoded_now]($(printf '%s\n' "$clipboard_encoded_now" | base64decode))"
      printf '%s\n' "$clipboard_encoded_now" | base64decode | c
      continue
    fi

    if [[ -n $clipboard_encoded_new ]] && [[ "$clipboard_encoded_now" != "$clipboard_encoded_new" ]]; then
      clipboard_encoded_now="$clipboard_encoded_new"
      local tmp_dirpath="${TMPDIR:-/tmp}/clipshare_remote_update_flag"
      if [[ -f "$tmp_dirpath" ]]; then
        rm -f "$tmp_dirpath"
        log "[$CLIPSHARE_MODE][watch_loop][updated by remote] data:[$clipboard_encoded_now]($(printf '%s\n' "$clipboard_encoded_now" | base64decode))"
      else
        log "[$CLIPSHARE_MODE][watch_loop][clipboard to pipe] data:[$clipboard_encoded_now]($(printf '%s\n' "$clipboard_encoded_now" | base64decode))"
        # to local or remote pipe output
        printf '%s\n' "$clipboard_encoded_now"
      fi
    fi
    sleep "$interval"
  done
}

ssh_retry_interval=${CLIPSHARE_SSH_RETRY_INTERVAL:-3}

if is_remote; then
  pipe_loop | watch_loop
elif is_local; then
  # remote server
  # base64 -d: linux
  # base64 -D: darwin
  # NOTE: send this script encoded by base64 and run at remote server
  watch_loop | until ssh "$host" "bash -c 'CLIPSHARE_MODE=remote && eval \"\$(echo $(cat "$0" | base64encode) | if [[ \$(uname) == Darwin ]]; then base64 -D; else base64 -d; fi)\"'"; do sleep "$ssh_retry_interval"; done | pipe_loop
fi
